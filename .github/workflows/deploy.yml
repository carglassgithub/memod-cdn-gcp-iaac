name: 'Deploy/update infrastructure '

on:
  push:
    branches:
    - none
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      
    - name: Verify Terraform version
      run: terraform --version
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |

          cd terraform && terraform init -migrate-state -input=false
          if  terraform workspace new ${{ inputs.environment }}
          then 
          echo Workspace created
          else
          echo workspace already exists
          fi
    # Generates an execution plan for Terraform
    - name: Terraform Init Upgrade
      run: |
          cd terraform \
          && terraform workspace select ${{ inputs.environment }} \
          && terraform init -upgrade

    - name: Terraform Plan
      run: |
          cd terraform \
          && terraform workspace select ${{ inputs.environment }} \
          && terraform plan \
          -var-file=${{ inputs.environment }}.tfvars
  
    - name: Terraform Apply
      run: |
           cd terraform \
           && terraform workspace select ${{ inputs.environment }} \
           && terraform apply \
           -auto-approve \
           -var-file=${{ inputs.environment }}.tfvars